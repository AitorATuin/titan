#!/usr/bin/env lua

local argparse = require 'argparse'

local checker = require 'titan-compiler.checker'
local coder = require 'titan-compiler.coder'
local parser = require 'titan-compiler.parser'
local util = require 'titan-compiler.util'
local pretty = require 'titan-compiler.pretty'
local driver = require 'titan-compiler.driver'

local p = argparse('titan', 'Titan compiler')
p:argument('module', 'Names of the modules to compile.'):args("+")
p:flag('--print-ast', 'Print the AST.')
p:option('-l --lua', 'Path to Lua source tree (to find Lua headers, defaults to "lua/src").')
p:option('-t --tree', 'Root of the source tree, used for looking for source modules (defaults to ".").')
local args = p:parse()

-- Work like assert, but don't print the stack trace
local function exit(msg)
    io.stderr:write(msg, "\n")
    os.exit(1)
end

if args.tree then
    driver.TITAN_SOURCE_PATH = args.tree
end

if not args.lua then
    args.lua = "lua/src/"
end

local errors = {}

for _, modname in ipairs(args.module) do
    local ok, errs = checker.checkimport(modname, driver.defaultloader)
    if #errs > 0 then table.insert(errors, table.concat(errs, "\n")) end
    local ast = driver.imported[modname].ast
    if args.print_ast and ast then
        print(parser.pretty_print_ast(ast))
    end
end

if #errors > 0 then exit(table.concat(errors, "\n")) end

local CC = os.getenv("CC") or "gcc"
local CFLAGS = os.getenv("CFLAGS") or "--std=c99 -O2 -Wall"
CFLAGS = string.format("%s -I%s -fPIC", CFLAGS, args.lua)

for name, mod in pairs(driver.imported) do
    local ok, err = driver.compile_module(CC, CFLAGS, name, mod)
    if not ok then table.insert(errors, err) end
end

if #errors > 0 then exit(table.concat(errors, "\n")) end
